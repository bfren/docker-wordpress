#!/usr/bin/nu

use bf

# Absolute path to WordPress source directory
const src = "/etc/bf/src/wordpress"

def main [] {
    # get PHP prefix and version
    cd /tmp
    let prefix = bf env PHP_PREFIX
    let version = bf fs read PHP_BUILD
    bf write $"Installing PHP v($version) extensions."

    # load versions from ext file and install
    let php_extensions = bf fs read PHP_EXT | lines | each {|x|
        if ($x | str starts-with "-" ) {
            $"($prefix)($x)=($version)"
        } else {
            $x
        }
    }
    bf pkg install $php_extensions

    # install PECL extensions
    let pecl_extensions = [
        $"($prefix)-pecl-imagick"
        $"($prefix)-pecl-redis"
    ]
    bf pkg install $pecl_extensions

    # install WordPress source files, content directory and default plugins
    bf write debug $"WordPress source directory: ($src)."
    install_source
    install_content
    install_plugins

    # add bf-wordpress module to config
    bf config use bf-wordpress

    # cleanup
    bf write "Removing /www files and directories."
    rm -rf /www/*
}

# Download and install WordPress source files
def install_source [] {
    # add dependencies
    bf write "Adding installation dependencies." install_source
    bf pkg install ["--virtual .install" "unzip"]

    # get version and locale
    let wp_version = bf fs read WP_VERSION
    let wp_locale = bf fs read WP_LOCALE

    # save WordPress version to build log
    bf build add WordPress $wp_version

    # build WordPress download URL
    let values = {
        subdomain: ($wp_locale | str replace "_" "-")
        version: $wp_version
        locale: $wp_locale
    }
    let url = bf string format $"https://{subdomain}.wordpress.org/wordpress-{version}-{locale}.zip" $values
    bf write debug $"WordPress download url: ($url)." install_source

    # get source download hash
    let hash = http get --raw $"($url).sha1"
    bf write debug $"SHA1 hash for WordPress ($wp_version) [($wp_locale)]:(char newline)($hash)" install_source

    # download source files to /tmp and verify checksum
    bf write $"Downloading WordPress ($wp_version) [($wp_locale)]." install_source
    let zip = "wp.zip"
    http get --raw $url | save --progress $zip
    $"($hash)  ($zip)" | ^sha1sum -c -

    # unzip files
    let tmp = $"/tmp/wordpress"
    bf write $"Unzipping source download files to ($tmp)." install_source
    ^unzip -oq $zip
    rm $zip
    if ($tmp | bf fs is_not_dir) { bf write error "WordPress not downloaded." install_source }

    # move files to src directory
    bf write $"Moving source files to ($src)." install_source
    mv $tmp $src
    if ($src | bf fs is_not_dir) { bf write error "WordPress not installed." install_source }

    # set permissions
    bf write $"Setting permissions on ($src)." install_source
    [$src "www:www" 0400 0500] | bf ch apply

    # remove installation dependencies
    bf pkg remove [".install"]
}

# Install WordPress content
def install_content [] {
    # define paths to content directories
    let wp_content_src = $"($src)/wp-content"
    bf write debug $"WordPress source wp-content directory: ($wp_content_src)." install_content

    let wp_content_default = $"($src)/wp-content-default"
    bf write debug $"WordPress default wp-content directory: ($wp_content_default)." install_content

    # create a copy of the WordPress content directory
    cp -r $wp_content_src $wp_content_default
}

# Install default plugins
def install_plugins [] {
    # get path to plugins directory
    let plugins_dir = $"($src)/wp-content/plugins"

    # closure that checks whether or not a plugin exists before attempting to install it
    let check = {|x|
        # get path to plugin directory
        let plugin_dir = $"($plugins_dir)/($x)"

        # if the plugin directory exists, return empty string
        if ($plugin_dir | path exists) {
            bf write $"Plugin ($x) is already installed." install_plugins
            return ""
        }

        # otherwise, create and then return the path to the plugin directory
        mkdir $plugin_dir
        $plugin_dir
    }

    # install plugins
    do $check "ninjafirewall" | install_plugin_ninja_firewall
}

# Install Ninja Firewall plugin
def install_plugin_ninja_firewall [] {
    # get plugin directory from piped input - if nothing is passed, do nothing
    let plugin_dir = $in
    if ($plugin_dir | bf fs is_not_dir) { return }

    # get plugin version and dowload url
    let version = bf fs read NINJAFIREWALL_VERSION
    let url = $"https://downloads.wordpress.org/plugin/ninjafirewall.($version).zip"
    bf write debug $"NinjaFirewall download url: ($url)." install_plugin_ninja_firewall

    # download plugin
    cd /tmp
    let name = $plugin_dir | path split | last
    let tmp = $"/tmp/($name)"
    let zip = $"($name).zip"
    bf write $"Downloading NinjaFirewall ($version)." install_plugin_ninja_firewall
    http get --raw $url | save $zip

    # unzip files
    bf write $"Unzipping source download files to ($tmp)."
    ^unzip -oq $zip
    rm $zip
    if ($tmp | bf fs is_not_dir) { bf write error "NinjaFirewall not downloaded." install_plugin_ninja_firewall }

    # move files to plugin directory
    bf write $"Moving source files to ($plugin_dir)."
    rm -r $plugin_dir
    mv $tmp $plugin_dir
    if ($plugin_dir | bf fs is_not_dir) { bf write error "NinjaFirewall not installed." install_plugin_ninja_firewall }

    # create cache directory
    bf write "Creating NinjaFirewall cache directory."
    mkdir $"($src)/wp-content/nfwlog/cache"
}
